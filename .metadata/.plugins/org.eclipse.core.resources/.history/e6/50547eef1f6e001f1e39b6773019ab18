package testBase;

import java.time.Duration;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;

public class BaseClass {
	
	
	public WebDriver driver; 
	public Logger logger;
	
	@BeforeClass 
	@Parameters({"os","browser"})
	public void setup(String os, String br) {
		logger= LogManager.getLogger(this.getClass());
		
		switch(br.toLowerCase()) {
		case "chrome": 	driver= new ChromeDriver(); break;
		case"edge": 	driver= new EdgeDriver(); break;
		case "firefox": 	driver= new FirefoxDriver();break;
		default: System.out.println("Invalide browser name"); return;
		}
		
		
		
		driver= new ChromeDriver();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		driver.get("https://tutorialsninja.com/demo/index.php?route=common/home");
		driver.manage().window().maximize();
	}
	
	@AfterClass
	public void terarDown() {
		driver.close();
	}
	public String randomString() {
		@SuppressWarnings("deprecation")
		String genratedString= RandomStringUtils.randomAlphabetic(5);
		return genratedString;	
	}
	
	@SuppressWarnings("deprecation")
	public String randomNumber() {
		String num= RandomStringUtils.randomNumeric(10);
		return num;
	}
	
	@SuppressWarnings("deprecation")
	public String randomAlphaNumeric() {
		String genratedString= RandomStringUtils.randomAlphabetic(3);
		String num= RandomStringUtils.randomNumeric(3);
		return (genratedString+num);
	}
	
	
}
